{
  "hash": "30d0dc273feee4ecde4807252c66264b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Environments as Code\n---\n\n## Learning objectives\n\n-   List the **three layers of data science environments.**\n-   Explain **why** it's important to **control the package\n    environment.**\n-   **Use `{renv}`** (or `{venv}`) to control the **package\n    environment.**\n-   Recognize **when** it is important to **control the system\n    environment.**\n\n## Recap {-}\n\nThe 5 tenets of DevOps from the intro call:\n\n1.  Code should be **well-tested** and tests should be **automated.**\n2.  **Updates** should be **frequent** and **low-risk.**\n3.  **Security** concerns should be considered **up front as part of\n    architecture.**\n4.  **Production** systems should have **monitoring and logging.**\n5.  Frequent opportunities for **review, change, and updating** should\n    be **built into the system** -- both **culturally** and\n    **technically.**\n\nChapter 1\n\n1.  Development\n2.  Testing\n3.  Production\n\n`r-lib` and Github Actions\n\n\"Servers as cattle\"\n\n## Intro Discussion {-}\n\nBefore we dive in, who has experience with managing package environments\nin R and Python, and what do you guys think about each language's\necosystem?\n\nWhich is simpler/more pleasant to use?\n\nHave you tried in R without RStudio?\n\n## The Three Layers of Environments {-}\n\n- Packages\n- System\n- Hardware\n\nToday we will focus mainly on the first layer, the package environment.\n\n## The Package Environment {-}\n\n![The Data Scientist Life Cycle](images/galaxy_package.jpeg)\n\n## Please don't {-}\n\n::: {style=\"display: grid; grid-template-columns: 1fr 1fr; grid-column-gap: 10px;\"}\n<div>\n\n\n::: {.cell}\n\n:::\n\n\n</div>\n\n<div>\n\n![nuh_uh](images/we_dont_do_that_here.jpeg)\n\n</div>\n:::\n\nWhy not?\n\n\"This works fine for a while. But the problem with this is that the default has you installing things into a cache that’s shared among every project on your system.\"\n\nIt's also considered rude to make changes to a user's system-level package setup.\n\nMore importantly, DevOps aims to help you make things that don't break,\ninstalling packages without versions specified does not prevent things\nfrom breaking in the future.\n\n## The Rooms of a House {-}\n\nMost of us manage to fit everything we want in our homes, but it's not\nall in the same room and we're not bound to keep our rooms the same over\ntime.\n\nAt any given time, we put things in different rooms for a variety of\nreasons; space and incompatible functions being the main two.\n\nThis is also true over time - perhaps even more so - we move rooms\naround, place things in and out of rooms according to our needs. It\nwould be quite restrictive if we had to have everything, everywhere, all\nat once.\n\n## There Can Only Be One {-}\n\nIt would be more restrictive still, if we had to have incompatible\nthings together. Kitchen and toilet together? No thanks\n\n![You must choose](images/one_and_only_one.jpeg)\n\n## Why? {-}\n\n'Why can't we have multiple version of the same package?'\n\n![Because no](images/because_no.png)\n\nWhen it comes to managing package environments, each package is stored\nin a /Library folder and we can only have one version of each package in\n/Library\n\n## Virtual Environments to the Rescue {-}\n\nWe can't have multiple versions of 'package x' in /Library, but we can have multiple versions of /Library, each with a different version of 'package x'\n\n::: {style=\"display: grid; grid-template-columns: 1fr 1fr; grid-column-gap: 10px;\"}\n<div>\n\n![From source material](images/multiple_libraries.png)\n\n</div>\n\n<div>\n\n![way too smart](images/way_too_smart.jpeg)\n\n</div>\n:::\n\n## Using Renv {-}\n\n-   Create a project\n-   Call `renv::init()` to create a standalone library\n-   Call `renv::activate()` this happens automatically if using RStudio\n    projects\n-   Install necessary packages with traditional syntax\n    `install.packages(\"dplyr\")`\n-   Call `renv::snapshot()` to track versions etc.\n\n\"\\* Lockfile written to '\\~/git_repos/bookclub-do4ds/renv.lock'.\"\n\nNow you have a file called renv.lock which has been updated with the project's packages and their versions:\n\n![renv lock](images/renv_lock.png)\n\n*see book for python equivalent i.e. virtualenv/venv and requirements.txt\n\n##  Sharing The Environment {-}\n\nNow that you have your lock file, you can send your project over to a friend/colleague and they should:\n\n- Download the project\n- Move into the project directory through the cmd line in 2 ways:\n  1 Open the .RProj file with RStudio\n  2`setwd('<project-dir>')` e.g. if you made a projects folder in your home directory and a project within your projects folder named my_project: `setwd(\"~/projects/my_project\")`\n- `renv::init()`\n- `renv::restore()` - if this didn't happen automatically\n \n## Avoiding Conda in production {-}\n\n\"In the context of a production environment, Conda smashes together the language version, the package management, and (sometimes) the system library management. ... I generally recommend people use a tool that’s just for package management, like {venv}, as opposed to an all-in-one tool like Conda.\"\n\n## Taking Control of the System Environment {-}\n\n\"In other cases, your R or Python library might basically just be a wrapper for system libraries. For example, many popular packages for geospatial analysis are just thin language wrappers that call out to the system libraries. In this case, it might be important to be able to maintain a particular version of the underlying system library to ensure that your code runs at all in the future.\"\n\nAs we have a chapter dedicated to Docker (which I haven't read) I won't dive into this here - I expect we'll have run out of time too.\n\n## Further reading {-}\n\nhttps://rstats.wtf/\n\n\n## Review {-}\n\nWhat did we learn?\n\n| Learning Objective                                                        | What Did We Learn?                                    |\n|-----------------------------------------|-------------------------------|\n| List the **three layers of data science environments.**                   | |\n| Explain **why** it's important to **control the package environment.**    |  |\n| **Use `{renv}`** (or `{venv}`) to control the **package environment.**    |  |\n| Recognize **when** it is important to **control the system environment.** |  |\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/b2GWwkN8rR8\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n\n<summary>\n\nMeeting chat log\n\n</summary>\n```\n00:43:56\tTinashe Tapera:\thttps://www.tidyverse.org/blog/2017/12/workflow-vs-script/\n00:45:19\tJon Harmon (jonthegeek):\tThat blog led to one of my favorite hex stickers: \"Everything I Know Is From Jenny Bryan\" https://raw.githubusercontent.com/MonkmanMH/EIKIFJB/main/EIKIFJB_sigmar_hex.png\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}