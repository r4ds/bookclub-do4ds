{
  "hash": "eddda385eda49d090b09013e74cb941f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Data Project Architecture\n---\n\n## Learning objectives\n\n\n- Learn about the three-layer app.\n- Learn why the presentation layer is important and how can we handle its data.\n- Learn about APIs.\n\n## The three layer architecture\nPoorly-architected software is likely to break when you share it or go to production.\nA standard software arquitechture for apps:\n\n![Three layer app](images/02_3-tier-app.webp)\n\n## Is it for Data Science projects?\n\nThe three layers can help clarify parts of our projects, but:\n\n- We might not be designing an app\n- We usually have projects with many components\n- Apps run in response to user actions, data science projects run in response \nto updates to the data\n- We usually don't have ownership on the data\n\n## The presentation layer\n\nIt is what our users will consume, so we have to choose it first. Options:\n\n- A **job**: it changes something in another system. \n- An **app**: data science web apps to explore datasets.\n- A **report**: might be static or have some interactive elements.\n- An **API**: for machine-to-machine communication. \n\n##\n![Decision workflow for presentation layer](images/02_presentation-layer.png)\n\n\n## Other things to consider for the presentation layer\n\n- **Do less** here. Keep only code that shows something to the user or that collects input from the user\n- Have **small data** here, you want high performance. \n    - Can you precalculate anything before it goes to the presentation layer?\n    - Can you reduce the granularity of your data? Figure out the dimensions that will make sense to the user\n\n## How to make big data small\n\nDon't pull all the data into your session. Instead:\n\n- Push work to the **data source**: do anything you can do before you pull the data out.\n- Be **lazy** with data pulls: pull the data that's needed when it's needed.\n- **Sample** the data. Makes sense for machine learning tasks but not for counting. \n- **Chunk and pull**. Identify natural groups. \n\n## Where to store the data\n\nIt depends on how often it is **updated**. In the presentation bundle, only if the data and the app will \nbe updated together. \n\n- Filesystem: hard for deployment.\n- Blob storage or pins: cloud storage like S3 from Amazon, Google Storeage or Azure.\n They usually have packages.\n - Google sheets: maybe as an intermediate step. \n\nYou can also store your intermediate artifacts in `.csv`, `pickle` or `rds` files or use **DuckDB**.\n\n## How about an API?\n\n::::{.columns}\n:::{.column width=\"50%\"}\n- API: Application Programming Interface. \n- Suited for the middle tier, you separate the processing logic into functions.\n- **Function as a service**. Functions, but in a completely separate process. \n- `{fastAPI}` and `{plumber}` can help.\n:::\n:::{.column width=\"50%\" .center}\n![API](images/02_api.png)\n:::\n::::\n\n## REST APIs\n\n- REpresentational State Transfer:\n- Resources and URLs to identify each function.\n- HTTP methods for CRUD operations. \n- Stateless: no client-specific context.\n- Representations for requests and reponses: Json or XML.\n\n[Dataverse Access API](https://guides.dataverse.org/en/6.7/api/dataaccess.html)\n\n## Write a data flow chart\n\n![Data flow chart](images/02_data-flow-chart.png)\n\n## Review {-}\n\nComprehension questions\n\n- Do you ever think about your application layer?\n- What libraries could you use to implement a three-layer architecture in R or Python?\n- How do you reduce the data requirements for your project?\n- How do you handle your intermediate artifacts?  \n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/Dh1g_D_Ir0A\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n\n<summary>Meeting chat log</summary>\n```\n00:02:43\tGus Lipkin:\tEast Coast US, 1pm local\n00:44:48\tGus Lipkin:\thttps://xkcd.com/927/\n00:57:17\tJack Penzer:\tGraph databases <3\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}