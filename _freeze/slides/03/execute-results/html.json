{
  "hash": "4144972305d68fe9b98f883fc177ad8d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Designing Your Application Layers\n---\n\n## Learning objectives\n\n> Since these notes were prepared, this chapter has been split into two chapters. These notes have not been updated to reflect this change.\n\n**Learning objectives:**\n\n-   Compare and contrast the tiers of the three-tier app architecture vs the seven data science services.\n-   Answer the two data-storage questions about an app: storage format and storage location.\n-   Choose the appropriate storage solution for an app.\n-   Authorize an app to access data.\n-   Consider database-as-a-service options.\n\n## Perspectives on Data Science Projects {-}\n\n-   DS vs SE Perspective\n\n    -   Data Flow Differences\n\n        ![DS Vs SE](images/ds_vs_se.PNG)\n\n    -   The software three-tier architecture vs the seven data science layers.\n\n-   We as SE/DE think of systems as a puzzle pieces where each piece of the puzzle have to optimally fit/integrated with other puzzle pieces.\n\n## Productionizing apps {-}\n\n-   Microservices and tight coupling (SRP OR SOC)\n\n-   The Idea of abstraction in software engineering & It's relation to how we could create a good API.\n\n-   **Important distinction**: Business Logic Vs App Logic\n\n    -   App Logic --\\> is all about how the user interacts with the app\n\n    -   Business Logic --\\>is all about the data inputs based on your business\n\n-   What else comes to your mind when you move DS project to production?\n\n## The What & Where Questions of Storage {-}\n\n-   What format would you use to store your data and why?\n\n-   Where you gonna put your data?\n\n## Factors we should consider when we choose our storage solution {-}\n\n-   Data Access patterns\n\n    -   on The App level\n\n    -   on The Data Pipeline Level\n\n-   Data Security\n\n-   How big are the data we're going to use inside our app?\n\n    ![](images/storage_space.PNG)\n\n-   What are the performance criteria for the storage solution?\n\n    -   Throughput --\\> how many units of information can be processed by a system within a given timeframe.\n\n    -   Latency --\\> is the time it takes for data to pass from one point on a network to another.\n\n## Data authorization {-}\n\n-   Don't allow all users to have access to all data.\n\n-   Avoid ever putting credentials in plain-text.\n\n-   Trivial approach of using `Sys` or `os` in R and Python.\n\n-   RStudio Connect to the Rescue with an encryption option.\n\n## Database-as-a-service {-}\n\n-   When to use what? **Database** vs **Datawarehouse** vs **Datalake**.\n\n-   Recommended solutions: **EBS**, **RDS**, **Redshift** and **S3**.\n\n-   Is that all we got? (**Hint**: Not even close!!).\n\n## Review {-}\n\nLeft those as an open discussion questions?\n\n| Learning Objective                                                                                    | What Did We Learn? |\n|------------------------------------|------------------------------------|\n| Compare and contrast the tiers of the three-tier app architecture vs the seven data science services. |                    |\n| Answer the two data-storage questions about an app: storage format and storage location.              |                    |\n| Choose the appropriate storage solution for an app.                                                   |                    |\n| Authorize an app to access data.                                                                      |                    |\n| Consider database-as-a-service options.                                                               |                    |\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/Dh1g_D_Ir0A\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n\n<summary>Meeting chat log</summary>\n```\n00:02:43\tGus Lipkin:\tEast Coast US, 1pm local\n00:44:48\tGus Lipkin:\thttps://xkcd.com/927/\n00:57:17\tJack Penzer:\tGraph databases <3\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}