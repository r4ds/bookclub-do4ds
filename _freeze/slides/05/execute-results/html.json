{
  "hash": "f39a3059abfd0c842943e5441dfbd545",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Code promotion and integration\n---\n\n## Learning objectives\n\n-   Describe the **three environments** used in software development and data science.\n-   Use **GitHub Actions (GHA) to deploy** data science assets.\n-   Keep environments in sync using **infrastructure as code (IaC) tooling.**\n\n## Why Do We Care About Code Promotion Workflows? {-}\n\n<figure>\n    <img src=\"https://i.redd.it/7zhsce11xms31.jpg\" style=\"float:right;width:300px;height:420px;\">\n    <figcaption>(Image Source: [Reddit](https://www.reddit.com/r/ProgrammerHumor/comments/di2shq/well_thats_interesting_lets_take_rest_of_the_day/))</figcaption>\n</figure>\n\n- Without foresight, live products can break. Users sad; supervisors mad.\n- Code promotion reduces the risk of disaster by:\n    - Modularizing processes\n    - Testing & checking rigorously\n    - Minimizing downtime\n\n> What does code promotion look like?\n\n## The Three Environments {-}\n\n<figure>\n    <img src=\"https://miamioh.edu/_files/images/it-services/news-articles/2017/08/dev-graphic.png\">\n    <figcaption>(Image Source: [Miami University](https://miamioh.edu/it-services/news/2017/08/dev-test-prod.html))</figcaption>\n</figure>\n\n\n### Dev {-}\n\n- The _development environment_ is the product sandbox\n- Most \"data science\" happens here:\n    - Data analysis & modeling\n    - App prototyping\n    - ETL\n\nComparing dev for data science vs dev for software engineering:\n\n<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\"></th>\n    <th class=\"tg-1wig\">Data Science</th>\n    <th class=\"tg-1wig\">Software Engineering</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0lax\"><span style=\"font-weight:bold\">Goal</span></td>\n    <td class=\"tg-0lax\">Explore relationships in data that may develop into live products</td>\n    <td class=\"tg-0lax\">Build &amp; implement a specific feature for a live product with pre-defined requirements</td>\n  </tr>\n  <tr>\n    <td class=\"tg-1wig\">Tools</td>\n    <td class=\"tg-0lax\">\"Fully fledged\" data science IDE (RStudio, VSCode) can encompass Dev, Test, &amp; Prod</td>\n    <td class=\"tg-0lax\">Dev, Test, &amp; Prod are differentiated by environments &amp; containers</td>\n  </tr>\n</tbody>\n</table>\n\n<figure>\n    <img src=\"https://www.productboard.com/wp-content/uploads/2022/04/untitled-3.png\" style=\"width:500px;height:450px;\">\n    <figcaption>Most of what data scientists do doesn't end up as a live product in the state it was created; these entities think differently! ([Source](https://www.productboard.com/blog/orchestrating-ml-workflows-with-airflow/))</figcaption>\n</figure>\n\n\n### Test {-}\n\n- Test is for testing :)\n\n- Tests used for many reasons incl. security, portability, performance, usability\n\n### Prod {-}\n\n- Gold standard (where your live product is released into the wild)\n- Should be guarded by Continuous Integration/Continuous Deployment (CI/CD)\n- Ideally zero manual interaction and zero changes to the actual code\n\n## CI/CD {-}\n\n- Most CI/CD processes are usually managed with git:\n\n<figure>\n    <img src=\"https://do4ds.com/chapters/sec1/images-code-promotion/git-branches.png\">\n    <figcaption>There are a handful of [git workflow patterns](https://rovitpm.com/5-git-workflows-to-improve-development/) for DevOps (Image Source: [The book!](https://do4ds.com/chapters/sec1/1-1-code-promotion.html#cicd-and-the-mechanics-of-code-promotion))</figcaption>\n</figure>\n\nCI/CD processes are \"triggered\" by git changes (i.e. when code changes in `test`)\n\n- GitHub is the leading provider for CI/CD via GitHub Actions (GHA)\n\n### How Does it Work? {-}\n\nYou write code that tells the CI/CD tool to:\n\n1. Build a clean, empty server on the cloud\n2. Copy your code with new changes and the bare-minimum requirements for it to run\n3. Install and run any tests as specified; if tests fail, stop immediately and inform the developer\n4. Accept the new changes and \"push\" to production (automatically copy the changes to the live product)\n\n`r-lib` üì¶ is your friend for getting started with GHA with R ‚Äî See [here](https://github.com/r-lib/actions)\n\n## Per-Environment Configuration {-}\n\n- When servers are \"stood up\" by CI/CD, they can take many forms\n- It's wise to test these forms for your users\n- How do you flexibly code CI/CD to test many forms? `config` üì¶ in R is your friend, use it to set environment variables^[We'll probably learn more about environment variables in chapter 7 + 8]\n\n## Creating & Maintaining Identical Environments {-}\n\n- Servers should be cattle; not sheep/environments are pocket change\n    - Servers should be unremarkable, used frequently and interchangeably\n- Test environments should be identical to production; therefore, never fiddle with test when tests fail\n    - Doing so introduces servers to _drift out of alignment_\n- Infrastructure as Code (IaC) are tools meant to manage these servers and changes\n\n## Review {-}\n\n+---------------------------------------+--------------------------------------+\n| Learning Objective                    | What Did We Learn?                   |\n+=======================================+======================================+\n| Describe the **three environments**   | 1. **Dev:** where products are       |\n| used in software development and data |   conceived and built                |\n| science.                              | 2. **Test:** where products are      |\n|                                       |   rigorously tested against the many |\n|                                       |   different environments they will   |\n|                                       |   encounter ‚Äúin the wild‚Äù            |\n|                                       | 3. **Prod:** where the live product  |\n|                                       |   exists ‚Äúin the wild‚Äù               |\n+---------------------------------------+--------------------------------------+\n| Use **GitHub Actions (GHA) to deploy**| R users can do this with `r-lib` üì¶  |\n| data science assets.                  |                                      |\n+---------------------------------------+--------------------------------------+\n| Keep environments in sync using       | * Servers are cheap; use frequently  |\n| infrastructure as code (IaC) tooling. | * IaC Tools help you stay away from  |\n|                                       |   drifting                           |\n+---------------------------------------+--------------------------------------+\n\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/9qQ4YpEgkr0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n<summary> Meeting chat log </summary>\n\n```\n00:44:58\tpriyanka gagneja:\tfantastic question\n00:47:25\tpriyanka gagneja:\tand dates\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}