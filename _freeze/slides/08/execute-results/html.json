{
  "hash": "134a6746c8ab61942989b586250266c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Getting Comfortable on the Command Line\n---\n\n## Learning objectives\n\n-   The structure of `bash` commands\n-   Referencing directories and files\n-   Reading text files\n-   Moving and copying files\n-   Server Files\n-   Writing files\n\n## `bash` Commands {.unnumbered}\n\n-   The general structure: `<command> <flags + flag args> <command args>`\n    -   `command`: What to do\n    -   `flags + flag args`: Options for the command and options for those options\n    -   `command args`: arguments to pass to the command\n\n### Listing files in the current directory {-}\n\nWe want to list files in the specified directory. The `bash` command to list files is `ls`.\n\n#### R {.unnumbered}\n\n-   `command`: `list.files()`\n-   `flags + flag args`: `all.files = TRUE`\n-   `command args`: `\".github\"`\n\n``` r\nlist.files(\".github\", all.files = TRUE)\n```\n\n#### bash {.unnumbered}\n\n-   `command`: `ls`\n-   `flags + flag args`: `-a`\n-   `command args`: `.github`\n\n``` bash\nls -a .github\n```\n\n### Long Commands {.unnumbered}\n\n-   Long commands are split onto multiple lines with a trailing backslash\n\n<!-- -->\n\n    this is a \\\n      really really \\\n      long command\n\n## Directories and Files {.unnumbered}\n\n| Where am I?                             | Reference |\n|-----------------------------------------|-----------|\n| Where was I born?                       | `/`       |\n| What town do I live in?                 |           |\n| Where do I live?                        | `~`       |\n| Where am I now?                         | `.`       |\n| Where was I just before where I am now? | `..`      |\n\n\\*There's no easy way to access your current mount point\n\n### What if you were a file? {-}\n\nLet's say you are this file: `/r4ds/do4ds/cohort1/chapter8.Rmd`\n\n| File System Root | Drive | Home Folder | Folder (Your Room) | File         |\n|------------------|-------|-------------|--------------------|--------------|\n| /                | r4ds  | do4ds       | cohort1            | chapter8.Rmd |\n\nRevisiting the \"Where am I? table\"\n\n| Where am I?                             | Reference |\n|-----------------------------------------|-----------|\n| Where was I born?                       | `/`       |\n| What town do I live in?                 | `r4ds`    |\n| Where do I live?                        | `do4ds`   |\n| Where am I now?                         | `cohort1` |\n| Where was I just before where I am now? | `do4ds`   |\n\n#### What if you have a sudden urge to see the world? {.unnumbered}\n\nThe `bash` command to change directories is `cd` . In this case, you start at `/r4ds/do4ds/cohort1` which is the directory for your (`chapter8.Rmd`) bedroom.\n\n| Quest                                                                                                                    | Directions              |\n|-----------------------------------------------------|-------------------|\n| Visiting your cousin in `cohort2`                                                                                        | `cd ../cohort2`         |\n| Visiting your second cousin in the `advr/cohort1` bookclub                                                               | `cd ../../advr/cohort1` |\n| You've gotten lost and don't know where you are and need directions to your second cousin in the `advr/cohort1` bookclub | `cd /r4ds/advr/cohort1` |\n| Stopping by the hospital where you were born because they have great grilled cheese sandwiches in the cafeteria          | `cd /`                  |\n| Going back to your room                                                                                                  | `cd ~/cohort1`          |\n\nAny path with `..` is a relative path and only works from your current directory.\n\n## Reading Text Files {.unnumbered}\n\nLet's take a look at `pr_check.yml` in our `.github/workflows` folder:\n\n``` bash\ncat .github/workflows/pr_check.yml\n```\n\n### The Pipe {.unnumbered}\n\n-   Linux offers a pipe, `|`, similar to that of R and other functional languages\n    -   `take the output of this | and give it to this as an input`\n\nTo find the workflow branch:\n\n``` bash\ncat .github/workflows/pr_check.yml | grep branches\n```\n\nTo show just the first six items in our current folder:\n\n``` bash\nls -a | head -n 6\n```\n\nNotice that `bash` returns the current folder and the parent folder as items.\n\n## Moving and Copying Files {.unnumbered}\n\nLet's say you are this file: `/r4ds/do4ds/cohort1/chapter8.Rmd`\n\n| File System Root | Drive | Home Folder | Folder (Your Room) | File         |\n|------------------|-------|-------------|--------------------|--------------|\n| /                | r4ds  | do4ds       | cohort1            | chapter8.Rmd |\n\n#### What if you do some remodeling at home? {.unnumbered}\n\nThe `rm` command will remove something, with the options to do so recursively (`-r`) or to force it (`-f`). You can also copy (`cp`), move (`mv`), or make or remove directories (`mkdir` and `rmdir`).\n\n| Construction Phase                                   | Command                                       |\n|------------------------------------------------------|-----------------------------------------------|\n| Move everything out of the kitchen into a spare room | `mv ~/kitchen/* ~/spare_room`                 |\n| Remove the kitchen appliances                        | `rm ~/kitchen/stove.app ~/kitchen/fridge.app` |\n| Demolish the kitchen                                 | `rmdir ~/kitchen`                             |\n| Make a new kitchen                                   | `mkdir ~/kitchen`                             |\n| Move everything into the new kitchen                 | `mv ~/spare_room/* ~/kitchen`                 |\n\nYou `mv` or `cp` `from_here to_here`\n\n## Server Files {.unnumbered}\n\n- Moving things as one big file has much better throughput than many small files\n  - Imagine sending someone a care package. You could send them individual items or one big box. The one big box is much easier to manage.\n- `tar` packs and unpacks tarball files\n  - Pack (create): `tar -czf <archive name> <file(s)>`\n  - Unpack (extract): `tar -xfv <archive name>`\n  \n- `scp` stands for \"secure copy\" and is a combination of `ssh` and `cp`\n\n## Writing Files {.unnumbered}\n\n### With the Command Line {.unnumbered}\n\n- `touch` creates a file\n- `>` is similar to pipe, but it will write to a file\n- `>>` is also similar to pipe, but it wall append to a file\n\n``` bash\ntouch file.txt\necho \"this goes in the file\" > file.txt\necho \"this also goes in the file\" >> file.txt\n```\n\n\n### With Command Line Text Editors {.unnumbered}\n\n- There are several text editors such as `vi`, `vim`, and `nano` that work directly in the command line\n  - Some are easier to use than others\n  \nTo exit vim:\n1. Hit the `escape` key on your keyboard\n2. Type one of these, making sure to include the `:`\n  - To write AND quit: `:wq`\n  - To quit without having made changes: `:q`\n  - To quit and not save changes: `:q!`\n  \nIt's okay if you don't remember.\n  \n### Memes About Exiting Vim {.unnumbered}\n\n![](https://preview.redd.it/m9eh2jw08qm61.jpg?width=583&format=pjpg&auto=webp&s=17994593b2b748b5087cc8ce786c7d161dd91747)\n\n![](https://cdn.thenewstack.io/media/2022/08/9e8dd2f9-reddit-programming-forum-celebrates-exiting-vim-questions-10th-anniversary.png)\n\n![](https://i.pinimg.com/736x/3e/88/c2/3e88c2d114591bb621d00298544562dc.jpg)\n\n![](https://pbs.twimg.com/media/DWVgnPdXcAArUU9.jpg)\n\n![](https://149351115.v2.pressablecdn.com/wp-content/uploads/2017/05/meme.jpeg)\n\n![](https://miro.medium.com/max/475/1*BPkK5FHiS6rXsygxNoO2XA.jpeg)\n\n## Meeting Videos {.unnumbered}\n\n### Cohort 1 {.unnumbered}\n\n<iframe src=\"https://www.youtube.com/embed/_umuxP_u-d0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}