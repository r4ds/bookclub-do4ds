{
  "hash": "e8582abedfa115937843333039a16547",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Getting Comfortable on the Command Line\n---\n\n## Learning objectives\n\n-   Set up and customize your machine’s command line\n-   Access a server via SSH (secure socket shell) \n\n# Command Line\n\n\n## Why use Command Line?\n\n- On a server, administrative interaction is via the command line  \n- Many tasks are quicker and easier\n\n::: {.callout-important}\n## Admin via GUI \n\nIn some organizations, server admin tasks are done via a graphical tool, but this is a red flag.\n\nIt means that the organization is either trying to find relatively low-paid (and probably low-skilled) admins or are using a graphical tool to limit what IT/Admins can do. Either way, it’s going to be harder to get things done. \n\n:::\n\n\n## Getting the command line you want\n\n- The **terminal** is the GUI where you’ll type in commands  \n- RStudio, Positron, and VS Code have built-in terminals  \n- Author recommends `iTerm2` for MacOS \n\n- The **shell** takes the commands you type and runs them  \n- Matches the commands you type to actual programs on your system, e.g. `Rscript`, `positron`, `code`, `git`, etc. \n- MacOS and Linux have *bash* and *zsh*, while Windows comes with *Command Shell* (`cmd`) and the *PowerShell*. Also, git bash on Windows  \n- Windows Subsystem for Linux (WSL) is another option  \n\n\n## Configuration management\n\nCustomization tools for window/tab behavior and text theme/plugins:\n\n- MacOS: `Prezto` or `OhMyZsh`. Three places to configure:  \n  * iTerm2 preferences   \n  * the zsh configuration file `.zshrc`  \n  * Prezto configuration file `.zpreztorc` \n- Author recommends looking into Git plugins, auto-completion and command history search functionality  \n- Windows: `Oh My Posh` for PowerShell  \n\n\n## Text editors  \n\n- IDE (RStudio, Positron, o VS Code)  \n- Standalone: *Sublime* or *Notepad++* (Windows only)  \n\n\n# SSH\n\n## Secure server connections with SSH\n\n- Remotely accessing a server from the command line on your machine \n- **SSH** (Secure Socket Shell) is a tool for making a secure connection to another computer over an unsecured network  \n- SSH requires invoking the `ssh` command line interface from a local host (your computer) with a username and the remote host’s (server’s) address. \n\nFor example, connecting to the server at `server.example.com` as the user `alex` would look like:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n> ssh alex@server.example.com\n```\n:::\n\n\n\n## Understanding SSH Keys\n\n- Configure your SSH keypair (*public key* and *private key*)  \n  - Public key: Register anywhere you’re trying to SSH into.\n  - Private key: Secret  \n- Public key is the *lock* and private key is the *key*  \n  \n![](images/ssh.png)\n\n\n## Public Key Cryptography\n\n- Public key cryptography is the underlying technology  \n- Never move the private key from the computer where it was created and never share it  \n\n![](images/keypair.png)\n\n## Practical SSH usage\n\n- Step 1: Create a keypair on the machine you are SSHing from. Public key has `.pub` suffix. `id_<encryption type>` is the standard way to name the key \n- Step 2: Register a public key to SSH into a server \n  - Add the public key to the end of your `.ssh/authorized_keys` file in your home directory  \n  - Ensure the permissions on the `authorized_keys` file are correct  \n- Step 3: To use SSH, type `ssh <user>@<host>`  \n  - You can specify a particular key with the `-i` flag  \n  - Set up an SSH config file if you use SSH a lot. That would shorten `ssh -i my-ssh-key alex@server.example.com` to `ssh alex-server`\n  \n## Continuous connection and debugging\n\n- SSH blocks the terminal it's using and the connection will break when your computer goes to sleep  \n- Use `tmux` command line utility to: \n  - Put sessions into the background  \n  - Make sessions durable through sleeps and other operations  \n  \n- For debugging SSH: Add a `-v` to your command for verbose mode  \n  - Add another v for more verbosity with `-vv`, and if that’s not enough, add another v for super verbose mode\n\n\n## Meeting Videos {.unnumbered}\n\n### Cohort 1 {.unnumbered}\n\n<iframe src=\"https://www.youtube.com/embed/_umuxP_u-d0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}