{
  "hash": "c6b79c47d5d714c62b2bb83a62e756c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Basic Linux SysAdmin\n---\n\n## Learning objectives\n\n-   Admin stuff that I won't dig into:\n    -   Create users in Linux.\n    -   Check and set Linux file permissions.\n    -   Install programs on Debian-based Linux distributions.\n    -   Check storage usage.\n    -   Manage processes.\n    -   Implement SSH port forwarding.\n    -   Locate files on the `$PATH`.\n-   Set up a data science AWS EC2.\n    -   Run RStudio on an AWS EC2.\n    -   Run JupyterHub on an AWS EC2.\n    -   Run a plumber API in a docker container on an AWS EC2.\n\n## Stand up an EC2 (chapter 10 lab review) {-}\n\n-   Sign in at [console.aws.amazon.com](console.aws.amazon.com)\n-   Go to EC2 (via services or other routes)\n-   \"Launch instances\"\n-   Fill in the form:\n    -   Name (`do4ds-lab`)\n    -   AMI: `ubuntu`\n    -   Type: `t2.micro` is free, might need larger later.\n    -   Key pair: Choose or create. `pem` version no matter what you're on.\n    -   Security group: Choose or create.\n    -   Storage: For now we aren't using anything more than the root.\n        -   We'll add more when we need it in a later lab.\n        -   It's fine if you already added some, though.\n    -   \"Launch instance\"\n-   \"Instance state\" menu to stop or terminate between labs.\n\n## Create a non-root user {-}\n\n-   (\"Instance state\" > \"Start instance\" to resume)\n-   Copy \"Public IPv4 DNS\" (will be `$SERVER_ADDRESS` below)\n    -   something like \"ec2-3-123-456-789.compute-1.amazonaws.com\"\n-   `ssh -i ~/path/to/do4ds-lab-key.pem ubuntu@$SERVER_ADDRESS`\n-   `sudo adduser test-user`\n    -   Give them a password\n    -   Defaults ok for everything else\n-   `sudo usermod -aG sudo test-user` (`a`dd to `G`roup)\n\n## Add an ssh key {-}\n\n-   Create new key *from your local machine* (if you don't have one):\n    -   On Windows: `ssh-keygen` works but it's fussy\n    -   I named it `id_rsa_test_user` (but then I reverted to my personal `id_rsa`!)\n    -   I didn't use a password\n-   `scp` the key to the server\n    -   `scp -i ~/path/to/do4ds-lab-key.pem ~/path/to/id_rsa.pub ubuntu@@$SERVER_ADDRESS:/home/ubuntu`\n-   On server:\n    -   `mv` & `chown` to user\n    -   `su test-user` & `cd ~`\n    -   `mkdir -p .ssh`, `chmod 700 .ssh`, `cat id_rsa.pub >> .ssh/authorized_keys`\n    -   `chmod 600 .ssh/authorized_keys`\n    -   `rm id_rsa.pub`\n\n## Notes on personal ssh key {-}\n\n-   ~~I still need `-i ~/path/to/id_rsa_test_user` in `ssh` call~~\n-   ~~Is this because I haven't \"set up an SSH config for this server\"?~~\n-   Update: Nope! It was because I had 2 keys in my local`.ssh` folder\n\n## Install R {-}\n\n-   `curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-arm64-latest.tar.gz | sudo tar xz -C /usr/local`\n-   `rig add release`\n-   `R`\n\n## Install RStudio Server {-}\n\n-   Check [current installation instructions](https://posit.co/download/rstudio-server/)\n-   `sudo apt-get install gdebi-core`\n-   `wget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2022.12.0-353-amd64.deb`\n-   `sudo gdebi rstudio-server-2022.12.0-353-amd64.deb`\n-   `sudo systemctl status rstudio-server`\n-   `rm rstudio-server-2022.12.0-353-amd64.deb`\n\n## Tunnel to see it locally {-}\n\n-   On your local machine:\n    -   `ssh -NL 8787:localhost:8787 test-user@$SERVER_ADDRESS`\n    -   I had to add the `N`, I'm not sure what it does (got it from Google)\n-   [It's alive!](http://localhost:8787/)\n\n## Install Python and JupyterLab {-}\n\n-   I did not do this and hope to never do this.\n\n## Plumber in docker {-}\n\n-   `sudo apt-get install docker.io`\n    -   `sudo docker ps` to make sure it worked\n\n```\nsudo docker run --rm -d \\\n  -p 8555:8000 \\\n  --name palmer-plumber \\\n  alexkgold/plumber\n```\n\n-   `ssh -NL 8555:localhost:8555 test-user@$SERVER_ADDRESS`\n-   [It's an api!](http://localhost:8555/__docs__/)\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/NbSDSB-kYA0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n<summary> Meeting chat log </summary>\n\n```\n00:21:29\tnovica nakov: it's more fun with more than one key :)\n00:22:45\tnovica nakov: no you copied in your local folder\n00:28:28\tTinashe Tapera: ssh-copy-id: https://www.ssh.com/academy/ssh/copy-id\n00:41:20\tGus Lipkin: Thereâ€™s a gui Docker image available for nginx that makes things easier (or more complicated depending on how you feel): https://nginxproxymanager.com/\n00:43:09\tTinashe Tapera: This is really nice\n00:51:45\tAhmed: pretty cool!\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}