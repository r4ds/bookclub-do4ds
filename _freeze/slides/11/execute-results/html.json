{
  "hash": "dfbbc2abfe3abc866dc3e5b5ff457571",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Choosing the Right Server for You\n---\n\n## Learning objectives\n\n- Appreciate computation hardware/software\n- CPU vs. GPU\n- RAM vs Storage\n\n## What is Computing? {-}\n\n- Everything on a computer is represented by a (usually very large) number.\n\n- At a hardware level the only thing computers do is add these numbers together.\n\n- Modern computers add very quickly and very accurately.\n\n- Computing speed is limited by **cores** and **clock**\n\n![classroom as a computer](https://content.fortune.com/wp-content/uploads/2017/08/gettyimages-535820805-e1513195741205.jpg)\n\n## CPU: The physical brain {-}\n\n- Cores: Available processing centers in a CPU (usually 4-32)\n\n- Clock speed: number of operations each core can accomplish (2-5 GHz, 2-5 billion operations per sec)\n\n- Most recent improvement is a result of number of cores, and core usage, not clocks\n\n![moore's law](https://upload.wikimedia.org/wikipedia/commons/0/00/Moore%27s_Law_Transistor_Count_1970-2020.png)\n\n## How do I go faster...? {-}\n\n- For R/Python, fewer faster cores are usually preferable to many slower cores\n\n- For servers, keep it light:\n\n$n \\textrm{ cores} = 1 \\textrm{ core per user} + 1$\n\n## GPU {-}\n\n- Specialized chips initially built for graphics\n\n- More numerous slower cores than CPU\n\n> Where a consumer-grade CPU has 4-16 cores, mid-range GPUs have 700-4,000 cores, but each one runs between 1% and 10% the speed of a CPU core.\n\n- Great for parallelisation (think Neural Nets)\n\n## So Should I Get  GPU...? {-}\n\n- Usually, no (parallelising into < 10 workers is often enough)\n\n- You'll know you need a GPU when you get there\n\n- _Discuss..._\n\n![decisions, decisions](https://study.com/cimages/videopreview/ayh7r7g0ty.jpg)\n\n## RAM {-}\n\n- Basically short term memory. When a process ends, it is destroyed (like when you quit RStudio)\n\n- Get a computer with lots of RAM, probably\n\n$\\textrm{Necessary RAM} = \\textrm{max amount of data} \\times 3$\n\n- If it's too big, move to disk (e.g. database, Arrow, dask, HDF5)\n\n![Big data in R](https://rviews.rstudio.com/post/2019-07-01-3-big-data-paradigms-for-r_files/chunk_pull.png)\n\n## Disk (Storage) {-}\n\n- Where physical files live and persist\n\n- The bigger the better (and cheaper nowadays)\n\n$\\textrm{Necessary Storage} = \\textrm{approx data} + 1 \\textrm{GB} \\times n \\textrm{ users}$\n\n## Scenarios {-}\n\n1. You try to load a big csv file into pandas in Python. It churns for a while and then crashes.\n\n2. You go to build a new ML model on your data. Youâ€™d like to re-train the model once a day, but it turns out training this model takes 26 hours on your laptop.\n\n3. You design an visualization Matplotlib , and create a whole bunch in a loop, you want to parallelize the operation. Right now youâ€™re running on a t2.small with 1 CPU.\n\n## Lab {-}\n\nNot much to say here...ðŸ¤·\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/VhTUMF9e-O0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<iframe src=\"https://www.youtube.com/embed/aV5aVjqzZ3c\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}