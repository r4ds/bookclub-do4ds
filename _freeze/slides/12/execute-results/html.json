{
  "hash": "e413bb4fe5b5a9f423a19748b1b270d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Intro to Computer Networks\n---\n\n## Learning objectives\n\n-   Details that we won't dig into:\n    -   Describe the pieces of a URL.\n    -   Briefly explain how ports map to services.\n    -   Outline how IP addresses map to servers.\n    -   Troubleshoot common network problems.\n-   Use `nginx` to make multiple services available from a single server.\n    -   Install `nginx` on an Ubuntu server.\n    -   Allow outside traffic to reach `nginx` on our AWS EC2.\n    -   Route traffic to RStudio via `nginx.conf`.\n    -   Route traffic to JupyterHub via `nginx.conf` (skipped here).\n    -   Route traffic to a plumber api via `nginx.conf`.\n\n## Install nginx {-}\n\n-   *(Make sure the server from Chapter 11 is running, with RStudio & the plumber API.)*\n-   `ssh test-user@$SERVER_ADDRESS`\n-   `sudo apt install nginx`\n\n## Allow outside traffic {-}\n\n-   *(Log into console.aws.amazon.com and navigate to EC2/Instances)*\n-   Click the \"Security\" tab on your instance.\n-   Click the Security group (something like `launch-wizard-2`)\n    -   (or go directly to \"Network & Security\"/\"Security Groups\")\n-   \"Inbound rules\" > \"Edit inbound rules\"\n-   \"Add rule\"\n    -   \"HTTP\", \"Anywhere-IPv4\"\n    -   \"HTTPS\", \"Anywhere-IPv4\" while we're in here (won't work yet, though)\n\n## Edit nginx.conf {-}\n\n-   `sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx-backup.conf`\n-   `sudo vim /etc/nginx/nginx.conf`\n    -   Delete everything below the `events` block (`80dd`).\n-   Set up http basics.\n\n```\nhttp {\n  \n  # Enable websockets (needed for Shiny) -- I don't know if this part matters.\n  map $http_upgrade  $connection_upgrade { \n    default upgrade; '' close; \n  }\n  \n  server { listen 80;\n  \n    # You can edit this file if you want a default page.\n    root /usr/share/nginx/html;\n    index index.html index.htm;\n  \n    # I think this was necessary to get it to work.\n    # We'll do more with this in Chapter 13.\n    server_name ec2-12-345-678-90.compute-1.amazonaws.com;\n  }\n}\n```\n\n-   `sudo systemctl restart nginx`\n-   Test it at your \"Public IPv4 DNS\".\n\n## Add RStudio routing {-}\n\n-   Add a `location` block inside the `http` / `server` section of `nginx.conf`.\n\n```\n    location /rstudio/ {\n      # Needed only for a custom path prefix of /rstudio\n      rewrite ^/rstudio/(.*)$ /$1 break;\n      \n      proxy_pass http://localhost:8787;\n      \n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_read_timeout 20d;\n      \n      # Not needed if www-root-path is set in rserver.conf\n      proxy_set_header X-RStudio-Root-Path /rstudio;\n      \n      # Optionally, use an explicit hostname and omit the port if using 80/443\n      proxy_set_header Host $host:$server_port;\n    }\n```\n\n-   `sudo systemctl restart nginx`\n-   Test it at your \"Public IPv4 DNS\" `/rstudio`.\n\n## Add plumber api routing {-}\n\n-   Add a `location` block each time you want to add an API.\n\n```\n    location /palmer/ {\n      # Check the book to see if he has added more!\n      proxy_pass http://localhost:8555/;\n      proxy_set_header Host $host;\n    }\n```\n\n-   `sudo systemctl restart nginx`\n-   Test it at your \"Public IPv4 DNS\" `/palmer/stats` and `/palmer/__docs__/`.\n\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/NbSDSB-kYA0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n<summary> Meeting chat log </summary>\n\n```\n00:21:29\tnovica nakov: it's more fun with more than one key :)\n00:22:45\tnovica nakov: no you copied in your local folder\n00:28:28\tTinashe Tapera: ssh-copy-id: https://www.ssh.com/academy/ssh/copy-id\n00:41:20\tGus Lipkin: Thereâ€™s a gui Docker image available for nginx that makes things easier (or more complicated depending on how you feel): https://nginxproxymanager.com/\n00:43:09\tTinashe Tapera: This is really nice\n00:51:45\tAhmed: pretty cool!\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}