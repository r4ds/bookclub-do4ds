{
  "hash": "9d95f2326ca11aa296084612c0996f11",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: DNS allows for human-readable addresses\n---\n\n## Learning objectives\n\n-   Details that we won't dig into:\n    -   Describe the pieces of a fully qualified domain name (FQDN).\n    -   Explain why DNS changes can take a long time to propagate.\n    -   Use DNS records to route traffic to a domain.\n-   Configure a domain name for an AWS EC2.\n    -   Allocate an Elastic IP.\n    -   Configure DNS records to route traffic to an AWS EC2.\n\n## Allocate an Elastic IP {-}\n\n-   *(Make sure the server from Chapter 12 is running, with `/rstudio` & `/palmer` via `nginx`)*\n-   Navigate to \"EC2\" > \"Network & Security\" > \"Elastic IPs\"\n-   \"Allocate Elastic IP Address\" (and click \"Allocate\")\n-   \"Actions\" / \"Associate Elastic IP Address\"\n    - Find the instance\n-   To clean up, you can do \"Actions\" / \"Release Elastic IP Addresses\"\n\n## Configure DNS Records {-}\n\n-   *(Register a domain)*\n-   Find the \"DNS\" settings for that domain at your registrar\n-   Add or edit 3 records:\n    -   A * `12.345.678.90`\n    -   A @ `12.345.678.90`\n    -   CNAME www `yourdomain.you`\n\n## Reconfigure nginx {-}\n\n-   `sudo vim /etc/nginx/nginx.conf`\n-   `server_name ec2.whatever;` to `server_name yourdomain.you www.yourdomain.you;`\n-   `sudo systemctl restart nginx`\n-   Visit `http://yourdomain.you/rstudio` and `http://yourdomain.you/palmer/stats`\n    - Chrome will yell at you since https won't work yet. See the next chapter!\n\n## Meeting Videos {-}\n\n### Cohort 1 {-}\n\n<iframe src=\"https://www.youtube.com/embed/NbSDSB-kYA0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<details>\n<summary> Meeting chat log </summary>\n\n```\n00:21:29\tnovica nakov: it's more fun with more than one key :)\n00:22:45\tnovica nakov: no you copied in your local folder\n00:28:28\tTinashe Tapera: ssh-copy-id: https://www.ssh.com/academy/ssh/copy-id\n00:41:20\tGus Lipkin: Thereâ€™s a gui Docker image available for nginx that makes things easier (or more complicated depending on how you feel): https://nginxproxymanager.com/\n00:43:09\tTinashe Tapera: This is really nice\n00:51:45\tAhmed: pretty cool!\n```\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}