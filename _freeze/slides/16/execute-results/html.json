{
  "hash": "57a7f204b1bf69142800ffcbbb7d9f17",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Auth in Enterprise\n---\n\n## Learning objectives\n\n- What is the difference between authentication and authorization?\n- What are some different ways to manage permissions? What are the advantages and drawbacks of each?\n- What is some advantages of token-based auth? Why are most organizations adopting it? Are there any drawbacks?\n- For each of the following, is it a username + password method or a token method? PAM, LDAP, Kerberos, SAML, ODIC/OAuth\n\n## Introduction {-}\n\n- The goal of Auth is to manage two desires: everybody should be able to do their work, but nobody should be able to work on something they're not supposed to\n- People leave, join, change roles frequently. Having one person with the key to every room is impractical (and unsafe)\n- In \"least privilege\", people only get access to the things they _need_ and nothing they don't\n- Auth is all about systems that balance these needs\n\n## LDAP/AD {-}\n\n- Authentication = knowing _who_ is requesting access to something they need\n- Authorization = checking if that person should have access to the thing they're asking for\n- Lightweight Directory Access Protocol (LDAP) or Access Directory (AD) centralizes security by having everyone need only one \"key\" for every room (one set of username-password credentials)\n  - Authentication is improved, but authorization is not\n  - The communication between the device and the server is not guaranteed to be secure\n  - You still need to check credentials at each room repeatedly\n\n## Single Sign On (SSO) {-}\n\n- SSO is like getting a key card at the front desk for the day\n  - The card is given to you if your credentials are correct (authenticated)\n  - Card maintains your credentials throughout the day\n  - Card already knows which rooms you need access to (authorized)\n- Managed by browser's tokens:\n  - Security Assertion Markup Language (SAML 2.0, in XML)\n  - Open Identity Connect (OIDC, OAuth2.0, in JSON)\n- External services like Okta, OneLogin, Azure Active Directory are vendors\n\n## Permissions {-}\n\n- Simple permissions management is just a list e.g. Access Control List (ACL)\n- Role Based Access Control (RBAC) defines groups of permissions by person e.g. manager, intern, executive\n  - More flexible and simple at first\n  - Complexity creep for each person who thinks they're \"special\"\n- Attribute Based Access Control (ABAC) defines permissions for combinations of the person, task, data, etc.\n  - e.g. AWS Identity and Access Management (IAM) aims to balance complexity with security\n\n## Why should we care? {-}\n\n- Your org should be able to equip you with the **tools** required to be a creative and effective data scientist without jeopardizing their privacy/security\n- Data access, of course\n  - Internal data sources often only need LDAP-like credentials (not SSO)\n  - Some orgs use Kerberos to create SSO-like tokens for data\n  - Others still use JSON Web Token (JWT) â€” rare but still new\n  - IAM is often used for cloud-to-cloud security\n- Service accounts are software that needs permission to do things by itself\n  - e.g. you don't want to have to sign in yourself for every user who wants to use your secure Shiny app\n\n## Learning Objectives {-}\n\n- What is the difference between authentication and authorization?\n  - Authentication = who is asking?\n  - Authorization = what do you want to do?\n- What are some different ways to manage permissions? What are the advantages and drawbacks of each?\n  - In order of complexity: ACL, RBAC, ABAC\n- What is some advantages of token-based auth? Why are most organizations adopting it? Are there any drawbacks?\n  - Reduces complexity by providing one \"handshake\", but doesn't solve everything (e.g. data access, token management)\n- For each of the following, is it a username + password method or a token method? PAM, LDAP, Kerberos, SAML, ODIC/OAuth\n\nPAM = username + password\n\nLDAP = username + password\n\nKerberos = Token\n\nSAML = Token\n\nODIC/OAuth = Token\n\n## Meeting Videos {.unnumbered}\n\n### Cohort 1 {.unnumbered}\n\n<iframe src=\"https://www.youtube.com/embed/ulTB4bFIbMQ\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}