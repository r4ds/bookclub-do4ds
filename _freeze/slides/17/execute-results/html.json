{
  "hash": "e05999528dffc5fc1b86d3e5063e7286",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Enterprise Server Management\n---\n\n## Learning objectives\n\n-   Simplyfing Complexity Using Infrastructure as Code (IaC)\n-   How to Scale and Stabilize Workloads in Enterprise-Level Organisations\n-   Facilitating Enterprise Workloads Management with Kubernetes\n\n## Simplyfing Complexity Using Infrastructure as Code (IaC)\n\n-   Servers should be cattle, not pets.\n\n-   Alex recommended a two-dimensional Dev/Test/Prod setup\n\n    ![](images/19_dev-test-prod.png)\n\n    -   IT/Admin group make changes to the platform in a staging environment.\n\n    -   Data scientists are never granted access to the staging environments and must complete all of their work in the IT/Admin production environment.\n\n- The ideal approach to migrate servers and apps from staging to production is to use IaC and CI/CD to ensure that code changes always make it into production at the proper time.\n\n## How to Scale and Stabilize Workloads in Enterprise-Level Organisations\n\n-   Vertical Scaling Limitations and Horizontal Scaling to the rescue\n\n    -   Before attempting horizontal scaling, it is usually always good to exhaust the portion of vertical scaling where costs climb linearly with computation.\n\n-   High Availability is achieved by\n\n    -   Using Load balancers in Horizontal scaling\n\n        -   Imagine a restaurant with one chef that is trying to serve meals to a hundred customers at once.\n\n            -   The chef can only cook one meal at a time, so the customers are getting frustrated with long wait times and some of them are leaving.This is because the chef is overloaded and cannot handle the intense workload.\n\n            -   Now, imagine the restaurant hires three more chefs, all with the same skills and equipment as the first chef. The restaurant invests in a system where each chef has a buzzer that goes off when there are new orders waiting for them. The buzzer ensures that each chef knows exactly when they need to start cooking a new meal, and they do not get overwhelmed by too many orders at once.\n\n            -   In this analogy, the chefs represent servers or clusters, and the buzzer represents a load balancer.\n\n    -   Maintaining a backup of the load balancer and the database/NAS.\n\n![](images/19_lb-cluster.png)\n\n-   Adding Autoscaling (i.e. you save money when traffic is low)\n    -   Many autoscaling frameworks these days assume that applications are mostly stateless.\n\n## Facilitating Enterprise Workloads Management with Kubernetes\n\n-   Kubernetes solves all three of the key enterprise IT/Admin challenges with running servers.\n\n-   Increasing the processing power of your cluster is usually as simple as a few mouse clicks. On the other side, this makes it risky from a cost perspective.\n\n-   *Helm* is the standard tool for defining what's running in the cluster.\n\n-   Instead of the ten steps required in a typical server-based deployment. There are just three steps for Kubernetes.\n\n-   What are the biggest strengths of Kubernetes as a scaling tool? What are some drawbacks?\n\n    -   Strengths:\n\n        -   Automatic Load Balancing\n\n        -   Horizontal Scaling\n\n        -   Infrastructure Agnosticism\n\n    -   Drawbacks:\n\n        -   Managing and maintaining a Kubernetes cluster can be complex and time-consuming and really requires a highly competent Kubernetes admin\n\n        -   Networking in Kubernetes can also be quite complicated.\n\n## Meeting Videos {.unnumbered}\n\n### Cohort 1 {.unnumbered}\n\n<iframe src=\"https://www.youtube.com/embed/uyNSi8IqGz0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n\n<iframe src=\"https://www.youtube.com/embed/SrmbX9ZtWH4\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}