{
  "hash": "6ec0f5d8a38e2c4a8c65b6a5ffcc10f9",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\ntitle: Open Source Data Science in the Enterprise\n---\n\n## Learning objectives\n\n-   What are sandboxes and why should we use them?\n-   What is the code promotion process?\n-   How does software licensing affect the work you do?\n-   What are some concerns to keep in mind when using free open-source software?\n\n## Data Science Sandboxes {.unnumbered}\n\n-   Keep dev/test/prod separated\n\nThree components to a sandbox:\n\n1.  free read-only access to real data\n2.  broad access to packages\n3.  production code promotion process\n\n## Read-only access {-} \n\n-   The last thing you want to do is mess up production data\n\n-   This gives you the access you need without the worry\n\n-   Any writes are contained to the sandbox\n\n-   You can also protect your data in completely offline environments\n\n    -   Fun fact: Some PCs have to be so secure that they're considered insecure if they've ever connected to any kind of network ever\n\n## Package availability {-}\n\n-   You may have package restrictions (understandable, but :( all the same)\n    -   Security\n    -   Correctness\n    -   Maintenance\n-   Free reign in dev is great\n    -   You can keep track of what you use with `renv` or `venv`\n\n## Promotion {-}\n\n-   How do you promote code from dev to test to prod?\n\n-   Usually only admins get prod access\n\n-   Always best to discuss a promotion strategy when getting started\n\n    -   Discussed in chapter 1\n\n## Dev/Test/Prod for Admins {-}\n\n-   Just like you want to keep your package environment safe, admins want your system kept safe\n    -   Servers, OS, R/Python, etc\n    \n- Promotion matrix\n  - IT/Admins can upgrade the environment separately from the data science tooling\n  - IT/Admins like to call development and testing \"staging\"\n  \n- This is where DevOps for Data Science starts to become regular DevOps\n  - Infrastructure as code\n  \n## Infrastructure as Code (IaC) {-}\n\n- To get a server to be useful you need two things:\n  1. Provision (create) the infrastructure\n  2. Configure the infrastructure\n- No clear dividing line between provisioning and configuring tools\n- Docker is part of IaC, but you still need a deployment framework and hypervisor or other container management software\n- IaC should be deployed with CI/CD, but doesn't have to be\n- You're not safe from your own bad habits\n  \nShiny example:\n\n1. Set up a server\n2. Configure network settings\n  - Security\n  - Ports\n  - Anything else\n3. Install R (or Python or whatever)\n4. Install Shiny\n5. Hosting software\n\n## Open Source in Enterprise {-}\n\nI am not a lawyer and this is not legal advice.\n\nBut try to be aware of the licenses your software and packages are under\n\nFour FOSS freedoms:\n\n1. View and inspect source code\n2. Run the software\n3. Modify the software\n4. Redistribute the software\n\nGeneral categories:\n\n- Permissive: You can do basically whatever you want\n  - Examples: MIT, Apache, BSD\n- Copyleft: Derivative works must use the same license\n  - Examples: GPL, AGPL\n  \n- Not something you want to mess with\n- Things get confusing when mixing licenses\n\n## Package Restrictions {-}\n\n- To restrict package access, IT Admins must:\n  - Restrict access to public repositories\n  - Provide an alternative!\n    - Don't worry about space needed for packages. Most are small\n      - I have 421 packages taking up ~2GB\n- Lots of kinds of enterprise repository software\n\nTwo main concerns:\n\n- Managing vulnerabilities\n  - Code scanners vs common vulnerabliities vs common sense\n- Licenses\n- Maintenance/lifetime\n\n## Meeting Videos {.unnumbered}\n\n### Cohort 1 {.unnumbered}\n\n<iframe src=\"https://www.youtube.com/embed/-CQeJDmxOc0\" width=\"100%\" height=\"400px\" data-external=\"1\"></iframe>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}